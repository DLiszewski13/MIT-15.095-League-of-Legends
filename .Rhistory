merge(lol_2016, all.x = TRUE, all.y = TRUE) %>%
merge(lol_2017, all.x = TRUE, all.y = TRUE) %>%
merge(lol_2018, all.x = TRUE, all.y = TRUE) %>%
merge(lol_2019, all.x = TRUE, all.y = TRUE) %>%
merge(lol_2020, all.x = TRUE, all.y = TRUE)
lol_data <- as_tibble(lol_data)
### Removes original data files for cleanliness
rm(lol_2014,lol_2015,lol_2016,lol_2017,lol_2018,lol_2019,lol_2020)
# renaming columns
names(lol_data) <- sub(" ", "_", names(lol_data))
# Figuring out which matches do not have full data or no gameid
lol_bad_gameids <- lol_data %>%
group_by(gameid) %>%
summarise(n=n()) %>%
filter(n != 12)
# Analyzing partial data rows
lol_partial_data <- lol_data %>%
filter(datacompleteness == "partial")
# gameids with partial data
lol_partial_games <- lol_partial_data %>%
group_by(gameid) %>%
summarise(n())
# rows with dpm missing
lol_no_dpm <- lol_partial_data %>%
filter(is.na(dpm)) %>%
group_by(gameid) %>%
summarise(n())
# kills outliers
lol_kill_outliers <- lol_data %>%
filter(kills > 30 | minionkills > 2000) %>%
group_by(gameid) %>%
summarise(n())
# Establishing periods for the purpose of aggregation statistics
month_group_1 <- c(1:5)
month_group_2 <- c(6:12)
# Performing filtering
lol_data_new <- lol_data %>%
# Filtering gameid with players missing, missing gameids
filter(!is.na(gameid)) %>%
filter(!(gameid %in% c(lol_bad_gameids$gameid))) %>%
# Filtering gameids with rows that do not contain dpm information
filter(!(gameid %in% c(lol_no_dpm$gameid))) %>%
# Removing gameids that have partial data
filter(!(gameid %in% c(lol_partial_games$gameid))) %>%
# Removing gameids with users that have an outlier amount of kills or minion kills
filter(!(gameid %in% c(lol_kill_outliers$gameid))) %>%
# Removing draws from dataset
filter(gameid != "3627-4571") %>%
filter(gameid != "3627-4572") %>%
# Removing Leagues that have few / inconsistent games (to avoid NA's in stat calculations)
filter(!(league %in% c("CIS CL", "IEM", "TCS", "DC", "TRA"))) %>%
# REmoving unnecesary rows
select(-c(datacompleteness,url,29:32,39:63,visionscore,vspm)) %>%
# Creating row to designate if a row contains player data or team data
mutate(player_row = ifelse(position == "team",0,1)) %>%
filter(player_row==1) %>%
mutate(datetime = date) %>%
mutate(date = as_date(datetime)) %>%
arrange(datetime) %>%
mutate(year = year(date),
month = month(date),
day = day(date)) %>%
# Creating aggregate period (6 months) for summary statistics
mutate(agg_period = case_when(year==2017 & month %in% month_group_2 ~ '2017.2',
year==2018 & month %in% month_group_1 ~ '2018.1',
year==2018 & month %in% month_group_2 ~ '2018.2',
year==2019 & month %in% month_group_1 ~ '2019.1',
year==2019 & month %in% month_group_2 ~ '2019.2',
year==2020 & month %in% month_group_1 ~ '2020.1',
year==2020 & month %in% month_group_2 ~ '2020.2'))
rm(month_group_1,month_group_2, lol_bad_gameids, lol_kill_outliers, lol_no_dpm, lol_partial_data, lol_partial_games)
##### CHAMPION STATS
lol_num_matches <- length(unique(lol_data_new$gameid))
champ_data_6mon <- lol_data_new %>%
group_by(agg_period) %>%
mutate(period_games = n_distinct(gameid)) %>%
ungroup() %>%
group_by(agg_period,champion) %>%
summarise(cwr_6mon = mean(result),
cpr_6mon = n() / mean(period_games)) %>%
filter(!is.na(agg_period)) %>%
ungroup()
champ_data_6mon <- lol_data_new %>%
group_by(agg_period) %>%
mutate(period_games = n_distinct(gameid)) %>%
ungroup() %>%
group_by(agg_period,champion,position) %>%
summarise(cwr_role_6mon = mean(result),
cpr_role_6mon = n() / mean(period_games)) %>%
filter(!is.na(agg_period)) %>%
ungroup() %>%
right_join(champ_data_6mon)
# Determing number of periods to filter by
periods <- unique(lol_data_new$agg_period)
periods <- periods[!is.na(periods)]
# Filtering to get unique df for each period
ch_data_list_6mon <- vector("list", length(periods))
names(ch_data_list_6mon) <- periods
for (i in 1:length(periods)){
ch_data_list_6mon[[i]] <- champ_data_6mon %>%
filter(agg_period==periods[i]) %>%
select(-agg_period)
}
# Assigning 1 to 0's to avoid dividing by 0 in calculations
lol_data_new$deaths[lol_data_new$deaths == 0] <- 1
lol_data_new$teamkills[lol_data_new$teamkills == 0] <- 1
lol_data_new$teamdeaths[lol_data_new$teamdeaths == 0] <- 1
# Player stats for the player in a certain position
player_stats_6mon <- lol_data_new %>%
mutate(kda = (kills+assists)/deaths,
r_kda = (kills+assists)/teamkills,
r_death = deaths/teamdeaths) %>%
group_by(player,agg_period,position) %>%
summarize(avg_kda_6mon = mean(kda,na.rm = TRUE),
avg_rkda_6mon = mean(r_kda,na.rm = TRUE),
avg_death_6mon = mean(r_death,na.rm = TRUE),
avg_dpm_6mon = mean(dpm,na.rm = TRUE),
avg_wardsplaced_6mon = mean(wardsplaced,na.rm = TRUE),
avg_wardskilled_6mon = mean(wardskilled,na.rm = TRUE),
avg_cs_6mon = mean(total_cs,na.rm = TRUE),
avg_mk_6mon = mean(monsterkills,na.rm = TRUE),
avg_mk_enemy_6mon = mean(monsterkillsenemyjungle,na.rm = TRUE),
avg_goldspent_6mon = mean(goldspent,na.rm = TRUE),
avg_csdiff_10_6mon = mean(csdiffat10,na.rm = TRUE),
avg_gddiff_10_6mon = mean(golddiffat10,na.rm = TRUE),
avg_xpdiff_10_6mon = mean(xpdiffat10,na.rm = TRUE),
avg_csdiff_15_6mon = mean(csdiffat15,na.rm = TRUE),
avg_gddiff_15_6mon = mean(golddiffat15,na.rm = TRUE),
avg_xpdiff_15_6mon = mean(xpdiffat15,na.rm = TRUE),
player_wr_6mon = sum(result)/n(),
player_fb_6mon = sum(firstblood)/n(),
player_fbvictim_6mon = sum(firstbloodvictim)/n()) %>%
filter(!is.na(agg_period)) %>%
ungroup()
# Filtering to get unique df for each period
pl_data_list_6mon <- vector("list", length(periods))
names(pl_data_list_6mon) <- periods
for (i in 1:length(periods)){
pl_data_list_6mon[[i]] <- player_stats_6mon %>%
filter(agg_period==periods[i]) %>%
select(-agg_period)
}
# Player stats for an individual champion
player_stats_champ_6mon <- lol_data_new %>%
group_by(player,agg_period,champion,position) %>%
summarize(n_games_champions_6mon = n()) %>%
filter(!is.na(agg_period)) %>%
ungroup()
# Filtering to get unique df for each period
pl_data_ch_list_6mon <- vector("list", length(periods))
names(pl_data_ch_list_6mon) <- periods
for (i in 1:length(periods)){
pl_data_ch_list_6mon[[i]] <- player_stats_champ_6mon %>%
filter(agg_period==periods[i]) %>%
select(-agg_period)
}
##### CHAMP STATS
champ_data_year <- lol_data_new %>%
group_by(year) %>%
mutate(period_games = n_distinct(gameid)) %>%
ungroup() %>%
group_by(year,champion) %>%
summarise(cwr_year = mean(result),
cpr_year = n() / mean(period_games)) %>%
filter(!is.na(year)) %>%
ungroup()
champ_data_year <- lol_data_new %>%
group_by(year) %>%
mutate(period_games = n_distinct(gameid)) %>%
ungroup() %>%
group_by(year,champion,position) %>%
summarise(cwr_role_year = mean(result),
cpr_role_year = n() / mean(period_games)) %>%
filter(!is.na(year)) %>%
ungroup() %>%
right_join(champ_data_year)
# Determing number of years to filter by
years <- unique(lol_data_new$year)
years <- years[!is.na(years)]
# Filtering to get unique df for each year
ch_data_list_year <- vector("list", length = length(years))
names(ch_data_list_year) <- years
for (i in 1:length(years)){
ch_data_list_year[[i]] <- champ_data_year %>%
filter(year==years[i]) %>%
select(-year)
}
##### PLAYER STATS
# Player stats for the player in a certain position
lol_data_new$deaths[lol_data_new$deaths == 0] <- 1
lol_data_new$teamkills[lol_data_new$teamkills == 0] <- 1
lol_data_new$teamdeaths[lol_data_new$teamdeaths == 0] <- 1
player_stats_year <- lol_data_new %>%
mutate(kda = (kills+assists)/deaths,
r_kda = (kills+assists)/teamkills,
r_death = deaths/1,teamdeaths) %>%
group_by(player,year,position) %>%
summarize(avg_kda_year = mean(kda,na.rm = TRUE),
avg_rkda_year = mean(r_kda,na.rm = TRUE),
avg_death_year = mean(r_death,na.rm = TRUE),
avg_dpm_year = mean(dpm,na.rm = TRUE),
avg_wardsplaced_year = mean(wardsplaced,na.rm = TRUE),
avg_wardskilled_year = mean(wardskilled,na.rm = TRUE),
avg_cs_year = mean(total_cs,na.rm = TRUE),
avg_mk_year = mean(monsterkills,na.rm = TRUE),
avg_mk_enemy_year = mean(monsterkillsenemyjungle,na.rm = TRUE),
avg_goldspent_year = mean(goldspent,na.rm = TRUE),
avg_csdiff_10_year = mean(csdiffat10,na.rm = TRUE),
avg_gddiff_10_year = mean(golddiffat10,na.rm = TRUE),
avg_xpdiff_10_year = mean(xpdiffat10,na.rm = TRUE),
avg_csdiff_15_year = mean(csdiffat15,na.rm = TRUE),
avg_gddiff_15_year = mean(golddiffat15,na.rm = TRUE),
avg_xpdiff_15_year = mean(xpdiffat15,na.rm = TRUE),
player_wr_year = sum(result)/n(),
player_fb_year = sum(firstblood)/n(),
player_fbvictim_year = sum(firstbloodvictim)/n()
) %>%
filter(!is.na(year)) %>%
ungroup()
# Filtering to get unique df for each year
pl_data_list_year <- vector("list", length(years))
names(pl_data_list_year) <- years
for (i in 1:length(years)){
pl_data_list_year[[i]] <- player_stats_year %>%
filter(year==years[i]) %>%
select(-year)
}
player_stats_champ_year <- lol_data_new %>%
group_by(player,year,champion,position) %>%
summarize(n_games_champions_year = n()) %>%
filter(!is.na(year)) %>%
ungroup()
# Filtering to get unique df for each year
pl_data_ch_list_year <- vector("list", length(years))
names(pl_data_ch_list_year) <- years
for (i in 1:length(years)){
pl_data_ch_list_year[[i]] <- player_stats_champ_year %>%
filter(year==years[i]) %>%
select(-year)
}
# Subsetting the useful variables from full dataset of games
useful_data <- lol_data_new %>%
select(c(1:21,73:77)) %>%
# filter(!is.na(agg_period))
filter(year >= 2017)
period_data_list <- vector("list", length(2:6))
names(period_data_list) <- periods[2:6]
## Go from 2: length-1 (6) because we only want observations (games) from 2018-beginning 2020
for (i in 2:6){
i_name <- as.character(periods[i])
i_prev <- as.character(periods[i-1])
period_data_list[[i_name]] <- useful_data %>%
filter(agg_period==periods[i]) %>%
left_join(pl_data_list_6mon[[i_prev]]) %>%
left_join(pl_data_ch_list_6mon[[i_prev]]) %>%
left_join(ch_data_list_6mon[[i_prev]]) %>%
pivot_wider(id_cols = c(gameid,side,result,league,playoffs,game,gamelength,patch,
agg_period,year,month,day,date,datetime),
names_from = position,
values_from = c(player,champion,27:50))
}
year_data_list <- vector("list", 3)
names(year_data_list) <- c("2018","2019","2020")
## Go from 5:7  because we only want data observations (games) from 2018 - 2020
for (i in 2018:2020){
# i-4 so that index starts at 1
i_name <- as.character(i)
i_prev <- as.character(i-1)
year_data_list[[i_name]] <- useful_data %>%
filter(year==i) %>%
left_join(pl_data_list_year[[i_prev]]) %>%
left_join(pl_data_ch_list_year[[i_prev]]) %>%
left_join(ch_data_list_year[[i_prev]]) %>%
pivot_wider(id_cols = c(gameid,side,result,league,playoffs,game,gamelength,patch,
agg_period,year,month,day,date,datetime),
names_from = position,
values_from = c(player,champion,27:50))
}
year_data_full <- year_data_list$'2018' %>%
full_join(year_data_list$'2019') %>%
full_join(year_data_list$'2020')
match_data_full <- period_data_list$'2018.1' %>%
full_join(period_data_list$'2018.2') %>%
full_join(period_data_list$'2019.1') %>%
full_join(period_data_list$'2019.2') %>%
full_join(period_data_list$'2020.1') %>%
full_join(year_data_full)
rm(player_stats_6mon,player_stats_champ_6mon,player_stats_champ_year,player_stats_year,
champ_data_6mon,champ_data_year,
pl_data_ch_list_6mon,pl_data_ch_list_year,pl_data_list_6mon,pl_data_list_year,
ch_data_list_6mon,ch_data_list_year,
i,i_name,i_prev,lol_num_matches, periods, years)
##### Including enemy data but keeping two rows
# cols for determing which rows to keep/remove when moving to one row
match_data_full$obs_num <- seq.int(nrow(match_data_full))
match_data_full$unofficial_match_num <- rep(seq.int(nrow(match_data_full) / 2), each = 2)
match_data_full_red <- match_data_full %>% filter(side=="Red")
match_data_full_blue <- match_data_full %>% filter(side=="Blue")
# Adding red sides as enemies to blue rows
match_data_full_blue_2 <- match_data_full_blue %>%
full_join(match_data_full_red,
by = c("gameid","league","playoffs","game","gamelength","patch",
"agg_period","year","month","day","date","datetime"),
suffix = c("","_enemy")) %>%
select(-c(result_enemy, obs_num_enemy, unofficial_match_num_enemy))
# Adding blue sides as enemies to red rows
match_data_full_red_2 <- match_data_full_red %>%
full_join(match_data_full_blue,
by = c("gameid","league","playoffs","game","gamelength","patch",
"agg_period","year","month","day","date","datetime"),
suffix = c("","_enemy")) %>%
select(-c(result_enemy, obs_num_enemy, unofficial_match_num_enemy))
## FINAL DATASET FOR USE (2 rows)
match_data <- full_join(match_data_full_blue_2,match_data_full_red_2)
## FINAL DATASET FOR USE (1 rows)
match_data_single <- match_data %>%
filter( (obs_num %% 2 == 0 & unofficial_match_num %% 2 == 0) |
(obs_num %% 2 == 1 & unofficial_match_num %% 2 == 1))
rm(match_data_full_blue,match_data_full_blue_2,match_data_full_red,match_data_full_red_2)
# Export data for 0.5/0.5 Y2019 (1 YEAR, 1 ROW) ------------------------------
match_data_cleaned <- match_data_single %>% select(-c('game', 'agg_period', 'date', 'datetime','gameid' ))
train_0.5_2019 <- match_data_cleaned %>% filter(year == 2019, month <= 5)
test_0.5_2019 <- match_data_cleaned %>% filter(year == 2019, month > 5)
test_0.5_2019 <- test_0.5_2019 %>%
filter(champion_top %in% train_0.5_2019$champion_top) %>%
filter(champion_jng %in% train_0.5_2019$champion_jng) %>%
filter(champion_bot %in% train_0.5_2019$champion_bot) %>%
filter(champion_mid %in% train_0.5_2019$champion_mid) %>%
filter(champion_sup %in% train_0.5_2019$champion_sup) %>%
filter(champion_top_enemy %in% train_0.5_2019$champion_top_enemy) %>%
filter(champion_jng_enemy %in% train_0.5_2019$champion_jng_enemy) %>%
filter(champion_bot_enemy %in% train_0.5_2019$champion_bot_enemy)%>%
filter(champion_mid_enemy %in% train_0.5_2019$champion_mid_enemy)%>%
filter(champion_sup_enemy %in% train_0.5_2019$champion_sup_enemy)
### TRAIN  DATA
train_0.5_2019_nochamp_noenemy_nocat_imputed <- read_csv("data/train_0.5_2019_nochamp_noenemy_nocat_imputed.csv")
## train_0.5_2019 comes from above (HAVE TO RUN ALL LINES, INEFFICIENT)
# train_0.5_2019 <- read_csv("../data/train_0.5_2019.csv")
train_0.5_2019_removed <- train_0.5_2019 %>%
select(c('side', 'league', 'result', 'patch','year', 'month','day',
#           'player_top' ,'player_jng','player_mid','player_bot','player_sup',
'unofficial_match_num','obs_num',
'champion_top_enemy',
'champion_jng_enemy','champion_mid_enemy'
,'champion_bot_enemy','champion_sup_enemy',
'champion_top'
,'champion_jng','champion_mid','champion_bot','champion_sup'))
train_0.5_2019_merged <- cbind(train_0.5_2019_removed,train_0.5_2019_nochamp_noenemy_nocat_imputed)
train_0.5_2019_merged <- train_0.5_2019_merged %>%
select(-c(day, month, obs_num, unofficial_match_num, league))
train_0.5_2019_merged$year = as.integer(train_0.5_2019_merged$year)
train_0.5_2019_merged$result = as.factor(train_0.5_2019_merged$result)
train_0.5_2019_merged$playoffs = as.factor(train_0.5_2019_merged$playoffs)
### TEST DATA
test_0.5_2019_nochamp_noenemy_nocat_imputed <- read_csv("data/test_0.5_2019_nochamp_noenemy_nocat_imputed.csv")
## test_0.5_2019 comes from above (HAVE TO RUN ALL LINES, INEFFICIENT)
# test_0.5_2019 <- read_csv("../data/test_0.5_2019.csv")
test_0.5_2019_removed <- test_0.5_2019 %>%
select(c('side', 'league', 'result', 'patch','year', 'month','day',
#           'player_top' ,'player_jng','player_mid','player_bot','player_sup',
'unofficial_match_num','obs_num',
'champion_top_enemy'
,'champion_jng_enemy','champion_mid_enemy'
,'champion_bot_enemy','champion_sup_enemy',
'champion_top'
,'champion_jng','champion_mid','champion_bot','champion_sup'))
test_0.5_2019_merged <- cbind(test_0.5_2019_removed,test_0.5_2019_nochamp_noenemy_nocat_imputed)
test_0.5_2019_merged <- test_0.5_2019_merged %>%
select(-c(day, month, obs_num, unofficial_match_num, league))
test_0.5_2019_merged$year = as.integer(test_0.5_2019_merged$year)
test_0.5_2019_merged$result = as.factor(test_0.5_2019_merged$result)
test_0.5_2019_merged$playoffs = as.factor(test_0.5_2019_merged$playoffs)
rm(train_0.5_2019_nochamp_noenemy_nocat_imputed, train_0.5_2019_removed,
test_0.5_2019_nochamp_noenemy_nocat_imputed, test_0.5_2019_removed)
colnames(train_0.5_2019_merged) == colnames(test_0.5_2019_merged)
sum(colnames(train_0.5_2019_merged) == colnames(test_0.5_2019_merged))
### EXPORTING
write.csv(train_0.5_2019_merged,"data/Imputed_Final/train_0.5_2019_imputed_full.csv", row.names = FALSE)
write.csv(test_0.5_2019_merged,"data/Imputed_Final/test_0.5_2019_imputed_full.csv", row.names = FALSE)
train_0.5_2019_merged %>%
mutate(team_wr_6mon <- mean(player_wr_6mon_top, player_wr_6mon_jng, player_wr_6mon_mid,
player_wr_6mon_bot, player_wr_6mon_sup)) %>%
mutate(team_wr_year <- mean(player_wr_year_top, player_wr_year_jng, player_wr_year_mid,
player_wr_year_bot, player_wr_year_sup)) %>%
select(team_wr_year,team_wr_6mon)
train_0.5_2019_merged %>%
mutate(team_wr_6mon <- mean(c(player_wr_6mon_top, player_wr_6mon_jng, player_wr_6mon_mid,
player_wr_6mon_bot, player_wr_6mon_sup))) %>%
mutate(team_wr_year <- mean(c(player_wr_year_top, player_wr_year_jng, player_wr_year_mid,
player_wr_year_bot, player_wr_year_sup))) %>%
select(team_wr_year,team_wr_6mon)
tmp <- train_0.5_2019_merged %>%
mutate(team_wr_6mon <- mean(c(player_wr_6mon_top, player_wr_6mon_jng, player_wr_6mon_mid,
player_wr_6mon_bot, player_wr_6mon_sup))) %>%
mutate(team_wr_year <- mean(c(player_wr_year_top, player_wr_year_jng, player_wr_year_mid,
player_wr_year_bot, player_wr_year_sup)))
tmp %>%
select(team_wr_year,team_wr_6mon)
tmp <- train_0.5_2019_merged %>%
mutate(team_wr_6mon = mean(c(player_wr_6mon_top, player_wr_6mon_jng, player_wr_6mon_mid,
player_wr_6mon_bot, player_wr_6mon_sup))) %>%
mutate(team_wr_year = mean(c(player_wr_year_top, player_wr_year_jng, player_wr_year_mid,
player_wr_year_bot, player_wr_year_sup)))
tmp %>%
select(team_wr_year,team_wr_6mon)
tmp <- train_0.5_2019_merged %>%
mutate(team_wr_6mon = player_wr_6mon_top + player_wr_6mon_jng + player_wr_6mon_mid +
player_wr_6mon_bot + player_wr_6mon_sup) %>%
mutate(team_wr_year = player_wr_year_top + player_wr_year_jng + player_wr_year_mid +
player_wr_year_bot + player_wr_year_sup)
tmp %>%
select(team_wr_year,team_wr_6mon)
tmp <- train_0.5_2019_merged %>%
mutate(team_wr_6mon = (player_wr_6mon_top + player_wr_6mon_jng + player_wr_6mon_mid +
player_wr_6mon_bot + player_wr_6mon_sup) / 5) %>%
mutate(team_wr_year = (player_wr_year_top + player_wr_year_jng + player_wr_year_mid +
player_wr_year_bot + player_wr_year_sup) /5 )
tmp %>%
select(team_wr_year,team_wr_6mon)
tmp <- data.frame("3Y (3Y Imp.)" = c(.526,.573),
"1Y (3Y Imp.)" = c(.547,.553),
"1Y (1Y Imp.)" = c(.505,.562))
tmp
tmp <- data.frame("3Y_3Y_Imp" = c(.526,.573),
"1Y_3Y_Imp" = c(.547,.553),
"1Y_1Y_Imp" = c(.505,.562))
tmp
tmp %>%
ggplot() +
geom_bar(aes(X3Y_3Y_Imp)) +
geom_bar(aes(X1Y_3Y_Imp)) +
geom_bar(aes(X1Y_1Y_Imp))
?geom_bar
tmp %>%
ggplot() +
geom_bar(aes(X3Y_3Y_Imp),position = "stack", stat = "bin") +
geom_bar(aes(X1Y_3Y_Imp)) +
geom_bar(aes(X1Y_1Y_Imp))
tmp2 <- data.frame(full = c(.526,.547,.505),
sparse = c(.573,.553,.562),
type= c("3Y_3Y_Imp", "1Y_3Y_Imp", "1Y_1Y_Imp"))
tmp2 %>%
ggplot() +
geom_bar(aes(type), position = "stack")
tmp2 %>%
ggplot() +
geom_bar(aes(type), position = "dodge")
geom_bar
?geom_bar
tmp2 %>%
ggplot() +
geom_bar(aes(type), position = "dodge", stat = "identity")
tmp2 %>%
ggplot() +
geom_bar(aes(type,full), position = "dodge", stat = "identity")
tmp2 %>%
ggplot() +
geom_bar(aes(type,full), position = "dodge", stat = "identity") +
geom_bar(aes(type,sparse), position = "dodge", stat = "identity")
tmp3 <- tmp2 %>%
pivot_longer(cols = c("full","sparse"), names_to = "Variable")
tmp3
tmp3 %>%
ggplot(aes(x=type, y=value, fill=variable)) +
geom_bar(stat='identity', position='dodge')
tmp3 %>%
ggplot(aes(x=type, y=value, fill=Variable)) +
geom_bar(stat='identity', position='dodge')
reorder(tmp3$type, c("3Y_3Y_Imp","1Y_3Y_Imp","1Y_1Y_Imp"))
tmp3 <- tmp2 %>%
pivot_longer(cols = c("full","sparse"), names_to = "Variable") +
labs(x="Type of Analysis",y = "AUC")
tmp3 %>%
ggplot(aes(x=type, y=value, fill=Variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x="Type of Analysis", y = "AUC")
tmp3 %>%
ggplot(aes(x=type, y=value, fill=Variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x="Type of Analysis", y = "AUC") +
scale_y_continuous(limits = c(0.3,0.6))
tmp3 %>%
ggplot(aes(x=type, y=value, fill=Variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x="Type of Analysis", y = "AUC") +
ylim(0.3,0.6)
tmp3 %>%
ggplot(aes(x=type, y=value, fill=Variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x="Type of Analysis", y = "AUC") +
coord_cartesian(ylim = c(0.3, 0.6))
tmp3 %>%
ggplot(aes(x=type, y=value, fill=Variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x="Type of Analysis", y = "AUC") +
coord_cartesian(ylim = c(0.4, 0.6))
tmp3 %>%
ggplot(aes(x=type, y=value, fill=Variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x="Type of Analysis", y = "AUC") +
coord_cartesian(ylim = c(0.45, 0.6))
tmp2 <- data.frame(full = c(.518,.519,.536),
sparse = c(.568,.537,.536),
type= c("3Y_3Y_Imp", "1Y_3Y_Imp", "1Y_1Y_Imp"))
tmp3 <- tmp2 %>%
pivot_longer(cols = c("full","sparse"), names_to = "Variable")
tmp3 %>%
ggplot(aes(x=type, y=value, fill=Variable)) +
geom_bar(stat='identity', position='dodge') +
labs(x="Type of Analysis", y = "AUC") +
coord_cartesian(ylim = c(0.45, 0.6))
rm(list=ls())
